// 
// Copyright (c) 2013 Agustin Santos
// 
// Permission is hereby granted, free of charge, to any person obtaining a 
// copy of this software and associated documentation files (the "Software"), 
// to deal in the Software without restriction, including without limitation 
// the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included 
// in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
// DEALINGS IN THE SOFTWARE.
//

using System.Diagnostics;

namespace LibNoise.Models
{
    /// Model that defines the surface of a plane.
    ///
    /// This model returns an output value from a noise module given the
    /// coordinates of an input value located on the surface of an ( @a x,
    /// @a z ) plane.
    ///
    /// To generate an output value, pass the ( @a x, @a z ) coordinates of
    /// an input value to the GetValue() method.
    ///
    /// This model is useful for creating:
    /// - two-dimensional textures
    /// - terrain height maps for local areas
    ///
    /// This plane extends infinitely in both directions.
    public class Plane
    {
        /// Constructor.
        public Plane()
        {
            m_pModule = null;
        }

        /// Constructor
        ///
        /// @param module The noise module that is used to generate the output
        /// values.
        public Plane(ModuleBase module)
        {
            m_pModule = module;
        }

        /// Returns the noise module that is used to generate the output
        /// values.
        ///
        /// @returns A reference to the noise module.
        ///
        /// @pre A noise module was passed to the SetModule() method.
        public ModuleBase GetModule()
        {
            Debug.Assert(m_pModule != null);
            return m_pModule;
        }

        /// Returns the output value from the noise module given the
        /// ( @a x, @a z ) coordinates of the specified input value located
        /// on the surface of the plane.
        ///
        /// @param x The @a x coordinate of the input value.
        /// @param z The @a z coordinate of the input value.
        ///
        /// @returns The output value from the noise module.
        ///
        /// @pre A noise module was passed to the SetModule() method.
        ///
        /// This output value is generated by the noise module passed to the
        /// SetModule() method.
        public double GetValue(double x, double z)
        {
            Debug.Assert(m_pModule != null);

            return m_pModule.GetValue(x, 0, z);
        }

        /// Sets the noise module that is used to generate the output values.
        ///
        /// @param module The noise module that is used to generate the output
        /// values.
        ///
        /// This noise module must exist for the lifetime of this object,
        /// until you pass a new noise module to this method.
        public void SetModule(ModuleBase module)
        {
            m_pModule = module;
        }



        /// A pointer to the noise module used to generate the output values.
        private ModuleBase m_pModule;

    }

}
